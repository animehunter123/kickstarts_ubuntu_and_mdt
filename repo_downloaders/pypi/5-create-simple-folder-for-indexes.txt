#!/bin/bash

# Define the source directory
# source_dir="./pypi-pipdownloaded"
source_dir="/mnt/OrioleNAS-Data/repos/pypi-pipdownloaded"

exit #INTENTIONAL AT THE MOMENT!!!!!!!!!!!


# @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
# Put this bash to RECREATE ./simple in the dir that has all the *.tar.gz and *.whl files
# @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
#!/bin/bash

# Start in the repository root
cd "/mnt/OrioleNAS-Data/repos/pypi-pipdownloaded"

# Create simple directory
rm -rf simple
mkdir -p simple

# Create main index.html
echo "<!DOCTYPE html><html><body>" > simple/index.html

# Loop through all .tar.gz, .whl, and .egg files
for file in *.tar.gz *.whl *.egg; do
    # Skip if no files match the pattern
    [ -e "$file" ] || continue

    # Extract package name (everything before the first hyphen)
    package_name=$(echo "$file" | sed -E 's/^([^-]+).*/\1/')
    
    # Normalize package name
    normalized_name=$(echo "$package_name" | tr '[:upper:]' '[:lower:]' | sed -E 's/[-_.]+/-/g')
    
    # Create package directory if it doesn't exist
    mkdir -p "simple/$normalized_name"
    
    # Add to main index.html
    echo "<a href=\"$normalized_name/\">$normalized_name</a><br>" >> simple/index.html
    
    # Create or append to package-specific index.html
    echo "<a href=\"../../$file#sha256=$(sha256sum "$file" | cut -d' ' -f1)\">$file</a><br>" >> "simple/$normalized_name/index.html"
done

# Close main index.html
echo "</body></html>" >> simple/index.html

# Ensure package-specific index.html files are properly formatted
for dir in simple/*/; do
    sed -i '1i<!DOCTYPE html><html><body>' "$dir/index.html"
    echo "</body></html>" >> "$dir/index.html"
done

echo "PEP 503 structure created successfully!"




# @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
# PHASE 2 
# @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@





















# Then you can do this:
pip uninstall -y numpy pandas dash ; pip cache purge
pip install --no-index --find-links=http://192.168.0.63/ numpy pandas dash  --trusted-host 192.168.0.63


# which means you need a pip.conf kinda like this.:::::::

/etc/pip.conf WILL HAVE

[global]
no-index = true
find-links = http://192.168.0.63/
trusted-host = 192.168.0.63

[install]
no-index = true
find-links = http://192.168.0.63/
trusted-host = 192.168.0.63

































# OLD

# create index.html
# echo "<html><body>" > ./index.html
# for f in *.whl *.tar.gz; do
#     echo "<a href='$f'>$f</a><br>" >> ./index.html
# done
# echo "</body></html>" >> ./index.html


# pip install pip2pi
# cd $source_dir


# dir2pi . #This will make a ./simple folder with symlinks all the packages + index.htmls


# NOTE: Some more cleanup maybe for bad files?
# grep -P '(\d+)_(\w+)_(.+?)-v(\d+.+?\.tar\.gz)' /tmp/fullList
# 1011903677_siddharth_topsis-v1.2.tar.gz
# 101903683_kunal_topsis-v1.2.tar.gz
#  horrible workaround? rm -f   1011903677_siddharth_topsis-v1.2.tar.gz 101903683_kunal_topsis-v1.2.tar.gz

# pip install --no-index --find-links=. yapi
# pip install --no-index --find-links=. numpy pandas dash
# Mount it and then, pip install --no-index --find-links=/tmp/OrioleNAS-Data/repos/pypi-pipdownloaded numpy pandas dash
# pip install --index-url http://192.168.0.63:8000/ numpy pandas dash --trusted-host 192.168.0.63





# OLD METHOD
# # Loop through all files in the source directory
# for file in "$source_dir"/*; do
#     # Check if the file name contains a dash and is a regular file
#     if [[ "$file" == *-* && -f "$file" ]]; then
#         # Extract the base name (without extension) and replace dashes with nothing
#         dirname="${file##*/}"  # Get the filename without the path
#         dirname="${dirname%%-*}"  # Get the part before the first dash
#         # Convert the directory name to lowercase (THIS WAS FOR python3 mhttpserver of MINE TO WORK!)
#         dirname=$(echo "$dirname" | tr '[:upper:]' '[:lower:]')
#         # Create the directory
#         mkdir -p "$source_dir/$dirname"
#         # Copy the file into the new directory
#         # cp "$file" "$source_dir/$dirname/"
#         mv "$file" "$source_dir/$dirname/" --force
#         echo "Created directory: $dirname and copied file: $file"
#     fi
# done
# NOTE: IF NEEDED, Confirm with...: find . -maxdepth 1 -type f -not -name "." && find . -maxdepth 1 -type d -not -name "." 
